<?php

	// Если бы требовалась проверка, загружен ли такой файл ранее, чтобы избежать дубликатов, то я бы конкатинировал номер к имени файла и создал бы цикл чтобы проверять не существует ли уже файл с таким именем. Перед этим я бы проверял наличие дубликата.



	// объявляем класс для добавления файла на сервер
	class AddFile
	{	
		// функция для получения результата добавления
		public function getResult($files){
			$success = 'Загрузка файла(-ов) прошла успешно!';
			// задаем массив с наименованиями типов изображений
			$imgTypeArr = [
			'image/jpg',
			'image/jpeg',
			'image/png',
			'image/gif',
			];
			// итерируем данные о файле(ах)
			foreach($files["userfile"]["error"] as $key => $error){
				// если есть ошибка в массиве файла, то вызываем метод получения ошибки и возвращаем ее
				if ($error > 0){ 
					$error = static::getError($error);
					return $error;
				}
				// объявляем переменную и присваиваем ей тип итерируемого файла
				$typeFile = $files["userfile"]["type"][$key]; 
				// если тип итерируемого файла совпадает с одним из типов из массива изображений то уведомляем пользователя об этом
				if( in_array($typeFile, $imgTypeArr) ){
					$success = 'Загрузка файла(-ов) и(или) изображения(-ий) прошла успешно!';
				} 
				// объявляем путь, в который мы поместим файл
				$uploads_dir = "files/$typeFile";
				// присваиваем переменной временный путь файла
				$tmp_name = $_FILES["userfile"]["tmp_name"][$key];
				// объявляем имя файла
				$name = basename($_FILES["userfile"]["name"][$key]);
				// если директория куда нужно поместить файл не существует, то создаем ее
				if( file_exists($uploads_dir) == false ){
					mkdir($uploads_dir, 0755, true);
				}
				// добавляем файл в файловую систему сервера
				move_uploaded_file($tmp_name, "$uploads_dir/$name");
			}
			// очищаем глобальный массив $_FILES
			unset($_FILES);
			// возвращаем результат выполнения
			return $success;
		}


		
		// метод обработки ошибок добавления файлов
		private function getError($idError){
			switch ($idError) {
			 	case '1':
			 		return $id_err = 'Размер одного из принятых файлов превысил максимально допустимый размер';
			 		break;
			 	case '2':
			 		return $id_err = 'Размер одного или нескольких файлов превышает 5 МБ';
			 		break;
			 	case '3':
			 		return $id_err = 'Загружаемый файл был получен только частично';
			 		break;
			 	case '4':
			 		return $id_err = 'Файл не был загружен';
			 		break;			
			 	case '7':
			 		return $id_err = 'Не удалось записать файл на диск';
			 		break;
			 	default:
			 		return $id_err = 'Ошибка загрузки $idError';
			 		break;
			 } 
		}

	}